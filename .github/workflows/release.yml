# .github/workflows/release.yml
# Workflow name
name: Release Build and Publish

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v2.3.4 etc.

# Permissions needed by the workflow to create releases and upload assets
permissions:
  contents: write

# Default settings for all jobs
defaults:
  run:
    shell: sh

# Environment variables available to all jobs
env:
  # Fail the build if there are warnings
  RUSTFLAGS: --deny warnings
  # Set the binary name of your crate here
  BINARY_NAME: "risclet"

jobs:
  # This job checks if the tag indicates a pre-release or a full release.
  check_release_type:
    name: Check Release Type
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.check_tag.outputs.is_prerelease }}
      tag_name: ${{ steps.check_tag.outputs.tag_name }}
    steps:
      - name: Check tag format
        id: check_tag
        run: |
          TAG_NAME="${{ github.ref_name }}"
          echo "Tag received: $TAG_NAME"
          case "$TAG_NAME" in
            *-*)
              echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
              echo "Detected prerelease: $TAG_NAME"
              ;;
            *)
              echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
              echo "Detected full release: $TAG_NAME"
              ;;
          esac
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

  # This job uses a dedicated cross-compilation container for Linux builds.
  build_linux_with_cross:
    name: Build for ${{ matrix.target }} (using cross-rs)
    runs-on: ubuntu-latest
    needs: [check_release_type]
    container:
      image: ghcr.io/cross-rs/cross:main

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - riscv64gc-unknown-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build binary with cross
        run: cross build --verbose --release --target ${{ matrix.target }}
      
      - name: Prepare Release Asset
        id: prepare_asset
        run: |
          TARGET="${{ matrix.target }}"
          # The output path for 'cross' is the same as 'cargo'
          SRC_PATH="target/$TARGET/release/${{ env.BINARY_NAME }}"
          # MODIFICATION: Removed the tag name from the asset name for a stable URL.
          ASSET_NAME="${{ env.BINARY_NAME }}-${TARGET}"
          
          echo "Source binary path: $SRC_PATH"
          echo "Final asset name: $ASSET_NAME"
          if [ ! -f "$SRC_PATH" ]; then
            echo "::error::Binary not found at $SRC_PATH"
            exit 1
          fi
          mv "$SRC_PATH" "$ASSET_NAME"
          echo "asset_path=$ASSET_NAME" >> "$GITHUB_OUTPUT"

      - name: Create/Update Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_release_type.outputs.tag_name }}
          files: ${{ steps.prepare_asset.outputs.asset_path }}
          draft: true
          prerelease: ${{ needs.check_release_type.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This job handles the native Windows and macOS builds.
  build_windows_and_macos:
    name: Build for ${{ matrix.target }} (on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [check_release_type]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
           RUSTFLAGS: ${{ (contains(matrix.target, 'pc-windows-msvc') && format('{0} -C target-feature=+crt-static', env.RUSTFLAGS)) || env.RUSTFLAGS }}

      - name: Prepare Release Asset
        id: prepare_asset
        run: |
          TARGET="${{ matrix.target }}"
          EXE_SUFFIX=""
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            EXE_SUFFIX=".exe"
          fi
          
          SRC_PATH="target/$TARGET/release/${{ env.BINARY_NAME }}$EXE_SUFFIX"
          # MODIFICATION: Removed the tag name from the asset name for a stable URL.
          ASSET_NAME="${{ env.BINARY_NAME }}-${TARGET}${EXE_SUFFIX}"
          
          echo "Source binary path: $SRC_PATH"
          echo "Final asset name: $ASSET_NAME"
          if [ ! -f "$SRC_PATH" ]; then
            echo "::error::Binary not found at $SRC_PATH"
            exit 1
          fi
          mv "$SRC_PATH" "$ASSET_NAME"
          echo "asset_path=$ASSET_NAME" >> "$GITHUB_OUTPUT"

      - name: Create/Update Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_release_type.outputs.tag_name }}
          files: ${{ steps.prepare_asset.outputs.asset_path }}
          draft: true
          prerelease: ${{ needs.check_release_type.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This job runs after all builds are complete. It finalizes the release.
  publish_release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [check_release_type, build_linux_with_cross, build_windows_and_macos]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          if ! command -v gh > /dev/null; then
             echo "GitHub CLI not found, installing..."
             sudo apt-get update && sudo apt-get install -y gh
          fi

      - name: Download Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.check_release_type.outputs.tag_name }}
        run: |
          mkdir release-assets
          cd release-assets
          echo "Downloading assets for tag $TAG_NAME from ${{ github.repository }}..."
          gh release download "$TAG_NAME" --repo "${{ github.repository }}" --pattern '*'
          echo "Download complete. Files:"
          ls -l

      - name: Create Checksums File
        id: checksum
        run: |
          cd release-assets
          CHECKSUM_FILE="../SHA256SUMS"
          if [ -z "$(ls -A .)" ]; then
             echo "No assets found to checksum."
             touch "$CHECKSUM_FILE"
             echo "checksum_created=false" >> "$GITHUB_OUTPUT"
          else
             sha256sum ./* > "$CHECKSUM_FILE"
             echo "Generated SHA256SUMS file:"
             cat "$CHECKSUM_FILE"
             echo "checksum_created=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Checksums and Publish Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.check_release_type.outputs.tag_name }}
        run: |
          if [ "${{ steps.checksum.outputs.checksum_created }}" = "true" ]; then
            echo "Uploading checksums..."
            gh release upload "$TAG_NAME" SHA256SUMS --clobber
          else
            echo "Skipping checksum upload as no assets were found."
          fi

          echo "Publishing release..."
          gh release edit "$TAG_NAME" --draft=false
